#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('smeFrontend:server');
var http = require('http');

global.SerialPort = require("serialport").SerialPort;

/**
 * Open serial port communications
 */
global.openSerialPort = function(portName) {
	global.serialPort = new SerialPort(portName, {
	  baudrate: 115200
	}, false);
	
	global.serialPort.open(function (error) {
	  if ( error ) {
	    console.log('SerialPort: failed to open: '+error);
	   // console.log('Available serial ports:');
	    //SerialPort.list(console.log);
	  } else {
	    console.log('SerialPort: open ok.');
		global.serialPort.on('data', function(data) {
			global.serialJSONline(data);
		});
	  }
	});
}

global.openSerialPort("COM3");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Socket.io setup
 */
var io = require('socket.io')(server);

global.sendData = function (s) {console.log("Socket.io not ready.")};

io.on('connection', function (socket) {
	socket.on('hi', function(){
		socket.emit("ack");
	});
	
	socket.on('command', function(data) {
		console.log("Command received: " + data);
		global.serialPort.write(data + "\n");
	});
	
	socket.on('port', function(data) {
		console.log("Change port received: " + data);
		global.serialPort.close(function(error) {
			console.log("Serial Port Closed");
			console.log(error);
		})
		global.openSerialPort(data);
	});
	
	global.sendData = function (s) {
		socket.emit("refresh", s);
	};
});

/**
 * Serial port JSON parser
 */

global.bracketIndex=0;
global.JSONString = "";

global.serialJSONline = function(s) {
	for (var i=0; i<s.length; i++) {
		var c = String.fromCharCode(s[i]);
		global.JSONString+=c;
		if(c=='{') {
			global.bracketIndex++;
		} else if (c=='}') {
			if (global.bracketIndex>0) global.bracketIndex--;
			if (global.bracketIndex==0) {
				try {
					var JSONData = JSON.parse(global.JSONString);
				} catch (e) {
					var JSONData = null;
				}
				global.sendData(JSONData);
				if (JSONData==null) {
					console.log("INVALID JSON DATA ON SERIAL PORT:");
					console.log(JSONString);
				}
				global.JSONString="";
			}
		}
	}
}
